[{"content":"可能会随口聊两句关于这个社团的印象，排名不分先后。\n紺碧studio\nTHE OTHER FLOWER\n东方团体，vocal是花たん，好听。\nALiCE\u0026rsquo;S EMOTiON\nREDALiCE主催，可以欣赏到他早期的曲子\n少女フラクタル\nCYCLIK CONTROL\nINTX Rec.\nAcuticNotes\nAn一个人组成的音乐团体，纯纯的artcore\nELFENSJóN\nHardcore Armament Reloaded\n音召缶\nRJT Music\nReal Japanese Trance\nZYTOKINE\nはちみつれもん\nOn Prism Records\n专做术立口，曲风大多很清新，我很中意。\nMEGAREX\nGET IN THE RING\nLilium Records\n比较老牌的社团，曲风很多变。\nSKETCH UP! Recordings\nSPACELECTRO\n东方社团，专做EDM改编\nNiZi RiNGO\nIllegal Wave Records\n6th主催，比较黑暗凶残的hardcore\nExist Twinkle\nBlackY\u0026rsquo;s BEATFLOOR\nYoohsic Roomz\n和上面那个一样一看就知道是谁的社团\nRound Wave Crusher\ndat file records\nFor You Sounds\nKirara Records\nHappy Hardcore比较多，快乐。\nSensitive Heart\nHardcore Tano*C\n越来越不Hardcore\nNext Reflection\nwavforme\n个人心目中封面做的最好看的社团之一，成员也都很有实力。\nFujimi lndustry Records\n比较underground的厂牌，所以会有很多听起来很与众不同甚至怪异的歌，但也因此很有新鲜感。\nRiparia Records\nDiverse System\n成员个个都是国家队级别\nsuwawa Records\nRolling Contact\n天音的别名义，专做EDM各种曲风的东方曲，很有才华。\nVIVID HARDCORE\n专做happy hardcore，双倍的快乐。\nPsycho Filth Records\n速核，快快快。\nJapanese Stream Hardcore\nDJ MYOSUKE主催，所以硬度有保证。。。\nSuganoMusic\nBinzokomegane Girls Union\nLogin Records\nLoquartz\nRTTF Records\nDACHiTRAX\n因为对かめりあ的喜爱而创立的社团，音乐也都是模仿他的风格。\n","date":"2023-02-06","permalink":"https://2yd.github.io/post/music-listened/","tags":["music"],"title":"记录一下那些听过的社团、厂牌或其他"},{"content":"\r日语形容词分为两类：一类形容词和二类形容词\n一类形容词 大部分以い结尾的形容词。\nいい かわいい いそがしい 二类形容词 除了一类形容词都是二类形容词，更正式的名称是形容动词。\n静か（しずか） 元気（げんき） 以い结尾的形容词：\n綺麗（きれい） 嫌い（きらい） 幸い（さいわい） 用法与变形 做表语：用法一致\n田中さんは忙しいです。\n田中さんは元気です。\n做定语：一类不变，二类加な\n田中さんは忙しい人です。\n田中さんは元気な人です。\n变形\n现在时 忙しい（一类，いい结尾例外） 静か（二类，无一例外） 现在时否定 忙しくない 静かじゃない 现在时敬体 现在时否定敬体 对应的简体+です 对应的简体+です 待续 ","date":"2023-02-02","permalink":"https://2yd.github.io/post/jp-learn-note-01/","tags":["Japanese","learning","note"],"title":"日语备忘录（1）形容词"},{"content":"不会记录详细的使用方法，简明记录注意事项、特殊用法以及遇到的坑。\n格式 golang为了“简洁和优雅”规定了很严格的格式规范，这里只列出一些凤毛麟角。\n分号 golang编译器会自动为每一条语句末尾添加分号，不需要也不建议手动添加。 如果一行需要多条语句则需要手动添加分号，可能会在for循环和if条件中使用，其他情况不建议这么写。\n大括号 golang中第一个大括号必须不换行，因为会自动添加分号换行就报错。我喜欢\nfunc main() { // 编译通过 } func main() { //编译不通过 } 注释 虽然有/* 块注释 */，但建议全部使用// 单行注释。块注释一般用于包注释，方便在godoc指令下生成文档。\n变量 变量声明 变量声明了就必须使用，否则报错\n变量声明了就必须使用，否则报错\n变量声明了就必须使用，否则报错\n基础款：\nvar num int //注意数据类型（int）的位置 num = 10 var num1, num2 int //也ok 为什么数据类型要放在后面呢，可以看Go\u0026rsquo;s Declaration Syntax这篇博客，简而言之是为了更好的可读性。\n声明并初始化：\nvar num = 10 //数据类型可以省略，编译器会自动推断 var num int32 = 10 //当然不要推断出来的int类型也可以 var num1, num2 = 10, 20 //并行赋值 var num3, string1 = 30, \u0026quot;hello world\u0026quot; //类型不一样也ok 再简化一点：（短变量赋值）\nnum := 10 //这里就绝对不能写数据类型了 num1, num2 := 10, 20 num3, string1 := 30, \u0026quot;hello world\u0026quot; 短变量赋值的左侧不一定全是新变量，若原变量已声明则效果等同于赋值。同时左侧必须至少有一个新变量。\nvar num4 int num4, num5 := 20,30 golang有很多“因式分解”式语法，比如变量也可以这么声明。\nvar ( num = 10 num2 = 20 num3 = 30 ) 变量的默认值 如果变量生成时没有初始化，默认值为其数据类型的零值。\nfunc main() { var num int fmt.Println(num) //0 } 可导出与不可导出 标识符首字母大写表示可以导出，相当于其他语言中的public，可以在其他包使用。\n标识符首字母小写表示不可导出，相当于其他语言中的private，不可以在其他包使用。\n关于包以后会在其他blog中详细说明。\n无效的标识符 2yd （数字开头）\ninterface（关键字或保留字），但是预定义标识符是可以使用的，下面的语句就是合法的\nvar append int append = 20 a+b（运算符）\n空白标识符 空白标识符为_，任何数据类型都可以给它赋值，赋值后该值被舍弃。由于golang中所有变量都至少被使用一次，_就可以用来接受不需要的赋值，比如在range中就经常使用。\narray := [5]int{1,3,5,7,9} sum := 0 for _, val := range array { sum += val } 命名规范 尽可能简洁，不要多余的说明，不需要在标识符中包含包名。 不要下划线，统统驼峰命名。 一些约定俗成或硬性规定，比如接口标识符通常以I开头或er结尾，标识符大写表示可以导出……以后会出现很多。 常量 顾名思义，常量的值是不能改变的，否则报编译时错误。\n常量声明 const PI = 3.1415926 //常量声明必须初始化，数据类型依旧可省略 const Ln2 = 0.693147180559945309417232121458\\ 176568075500134360255254120680009 //反斜杠可以作为连接符 const male, female = 0, 1 //并行赋值 const ( //因式分解式声明 Monday, Tuesday, Wednesday = 1, 2, 3 Thursday, Friday, Saturday = 4, 5, 6 ) 常量的初始化 常量声明时必须初始化。由于在常量声明编译期间其他自定义函数都是未知，因此不能用自定义函数返回值初始化常量，但是内置函数比如len()可以。\niota 当常量需要被当作枚举值时可以通过iota简化代码：\nconst ( type00 = 0 type01 = 1 type02 = 2 type03 = 3 type04 = 4 ) 等价于\nconst ( type00 = iota type01 type02 type03 type04 ) 实际上iota的规则非常复杂，可以参考三分钟看透iota。\n","date":"2023-02-02","permalink":"https://2yd.github.io/post/golang-note-1/","tags":["golang","learning","note","programming"],"title":"Golang笔记（1）：格式、变量与常量"},{"content":"Markdown笔记，用自己的方式记录Markdown语法，也可能作为cheat sheat。使用的编辑工具为Typora，如果使用其他编辑工具可能与这篇blog描述有所出入。\n先来一段舒适的音乐 段落 使用空白行将文本进行分割。目前Typora等markdown编辑程序都会自动实现这个过程，不过多赘述。需要注意在Markdown中最好不要使用空格与Tab进行缩进。\n换行 在一行的末尾打两个空格并回车即可创建换行。也可以使用html的换行标签\u0026lt;br\u0026gt;进行换行。\n在Typora等Markdown等文本编辑器中，回车代表创建段落，shift+回车代表换行，这与平时的使用习惯可能有所不同。有时因为段落问题会导致Markdown格式很奇怪，就有可能是这个原因造成的。\n分隔线 单独一行上使用三个以上的星号(*)、下划线(_)或破折号(-)创建分隔线，效果上没有区别。为保证兼容性最好前后都添加空行。\n字体 基本使用：_文本_或*文本*使 文本 变为斜体，__文本__或**文本**使得 文本 变为粗体，~~文本~~为文本加删除线。\n简要补充：\n斜体和加粗可以同时使用，比如***文本***或**_文本_**都可以使得 文本 变为斜体加粗。更推荐**_文本_**使语法更清晰。\n这些语法当然是可以跨越多个词语的，for example。\n如果文本周围没有空格分隔，比如这是__一句__文本，这种情况下__下划线__会失效，请全部使用星号。\n引用 在需要引用的内容前面加一个\u0026gt;即可，比如这句话就就在一个引用块中。\n简要补充：\n引用块是可以嵌套的，多加一个\u0026gt;即可，效果如下\n禁止套娃\n禁止套娃\n引用块中支持其他的Markdown格式，这篇blog中随处可见。\n代码 使用反引号(`)标识单行代码，使用一对三个反引号标识一块代码。第一组反引号后加语言名可以实现对应的语法高亮。具体实例下面会有很多的（\n标题 标题分为一到六级，一级标题格式# 标题，六级标题格式###### 标题，以此类推。\n简要补充：\n也可以在文本下方添加任意数量的=号标识一级标题，-号标识二级标题\n为了兼容考虑需要在#与标题之间使用空格隔开。\n标题文本不能再加粗，但可以加斜体或删除线。\n标题可以创建编号，格式为### 一个标题 {#一个编号}，可以配合下面的链接实现跳转。\n链接 最基本的使用：[链接显示的文本](地址)，比如哔哩哔哩。\n根据语法的不同可以进行如下区分：\n超链接 [链接显示的文本](地址)，就是上面那个最基本的使用方法。\n简要补充：\n[]中的文本支持加粗斜体删除线等操作，代码格式也可以。\nfmt.Println(\u0026quot;Hello World\u0026quot;) ←点一下\n可以为链接加title，格式为[链接显示的文本](地址 \u0026quot;title\u0026quot;)，title可以用双引号、单引号或括号包裹。效果为鼠标移上去之后显示的文本。比如哔哩哔哩\n可以配合标题链接使用，地址改成对应的标签就行了，比如点我回到链接标题。\n网址和Email \u0026lt;网址或者email\u0026gt;，将其变成可以点击的链接。\n比如：https://www.hust.edu.cn u114514@hust.edu.cn\n引用链接 第一部分：[链接显示的文本][标签]\n第二部分：[标签]: 地址，这部分不会被Markdown渲染出来，大部分人喜欢将这个部分放在最末尾。 每个部分的名字都是乱起的，怎么好记怎么来。\n示例：\n[哔哩哔哩][1] [1]: https://www.acfun.cn 渲染效果：\n哔哩哔哩\n不太简要的补充说明：\n第二部分其实不需要放在第一部分之前，只不过实际使用中更习惯放在后面。 标签不区分大小写，可以包含数字、字母、标点、空格。 第一部分中链接显示的文本和标签可以使用一个空格隔开。 第二部分中的地址也是可以加title的，格式和超链接相同，比如[1]: www.acfun.cn \u0026quot;ニコニコ動画\u0026quot;。 第二部分冒号后至少需要一个空格分隔。 图片 ![图片文本](图片地址)，很简单吧。[![图片文本](图片地址)](地址)就可以给图片加链接了，也很简单吧。图片文本和html的img标签里的alt功能差不多，比如图片炸了就会显示出来。\n←点一下\n图片本质上也是个链接，因此也可以有引用链接的格式，和链接的引用链接差不多就不再赘述了。\n列表 无序列表 在每个列表项前加*\n第一项 第二项 第三项 有序列表 在每个列表项前加数字和句点\n第一项 第二项 第三项 不太简要的补充：\n有序列表的序号不一定要严格按递增顺序排序，但一定要以1.开头，最后渲染的时候仍然会渲染为1. 2. \u0026hellip;的格式。\n1. 第一项 32. 第二项 15. 第三项 15. 第四项 这种写法也是可以的，属于合法但有病。\n列表可以嵌套。比如就可以在这个有序列表里再嵌套一个无序列表：\n只需要多缩进四个空格或一个tab就行了，但是经过测试三个空格也可以 嵌套一般不超过三个，否则格式会很混乱 列表里也可以插入其他元素，需要将改元素多缩进四个空格或一个tab，但是经过测试三个空格也可以。比如插入一个引用：\n一个引用\n或者一个图片\n或者一个代码块\nimport \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;Hello world!\u0026quot;) } 任务列表 每一项前加 - [ ]，如果表示已完成就加 - [x]\nBlog搭建 Blog部署 发布一万篇Blog 表格 格式用语言描述太难了，直接看下面的代码块：\n| Syntax | Description | Test Text | | :--- | :----: | ---: | | Header | Title | Here's this | | Paragraph | Text | And more | 其中:---代表左对齐， :---:代表中对齐, ---:代表右对齐 一般没人会选择手打表格，请使用Markdown Tables generator或者Markdown编辑工具自带的表格生成工具来创建表格。\nemoji 两个冒号之间加emoji名字😋，具体可以查阅Complete list of github markdown emoji markup\nLaTeX数学公式块 在latex公式两侧使用$$包围，latex的语法就不能在这篇Blog里展开说了。。。\n$$ \\varGamma(x)=\\frac{\\int_{\\alpha}^{\\beta}g(t)(x-t)^2\\text{d}t}{\\phi(x)\\sum_{i=0}^{N-1}\\omega_i}\\tag{2} $$\nHTML Markdown支持直接嵌入html标签\n","date":"2023-01-31","permalink":"https://2yd.github.io/post/markdown-note/","tags":["markdown","note","learning"],"title":"Markdown笔记"},{"content":"第一条blog祭天 ","date":"2023-01-30","permalink":"https://2yd.github.io/post/first-post/","tags":["test"],"title":"第一条blog"}]